#!/usr/bin/env php
<?php

declare(strict_types=1);

use RTCKit\Eqivo as Eqivo;

use RTCKit\FiCore\{
    Plan,
    Command,
    Signal,
};
use RTCKit\FiCore\Switch\ESL;

error_reporting(-1);
set_time_limit(0);

if (is_file(__DIR__ . '/../vendor/autoload.php')) {
    $autoloadPath = __DIR__ . '/../vendor/autoload.php';
} else if (is_file('./vendor/autoload.php')) {
    $autoloadPath = './vendor/autoload.php';
} else {
    die('Cannot locate vendor/autoload.php file!' . PHP_EOL);
}

/** @psalm-suppress UnresolvableInclude */
require_once($autoloadPath);

if (!defined('PHP_VERSION_ID') || (PHP_VERSION_ID < 80100)) {
    die('Eqivo requires PHP 8.1+' . PHP_EOL);
}

foreach (['ctype', 'date', 'filter', 'json', 'libxml', 'pcre', 'simplexml'] as $ext) {
    if (!extension_loaded($ext)) {
        die("Please make sure '{$ext}' extension is available and enabled in your PHP configuration" . PHP_EOL);
    }
}

libxml_use_internal_errors(true);

$eqivo = new Eqivo\App;

$eqivo
    ->setConfig(new Eqivo\Config\Set)
    ->addConfigResolver(new Eqivo\Config\CliArguments)
    ->addConfigResolver(new Eqivo\Config\LegacyConfigFile)
    ->addConfigResolver(new Eqivo\Config\ConfigFile)
    ->addConfigResolver(new Eqivo\Config\EnvironmentVars)
    ->resolveConfig();

$eqivo->setHttpClient(new Eqivo\HttpClient);

$eqivo
    ->setEventConsumer(new ESL\Event\Consumer)
    ->setPlanConsumer(
        (new Eqivo\Plan\Consumer)
            ->setApp($eqivo)
            ->setElementHandler(Plan\CaptureSpeech\Element::class, new Plan\CaptureSpeech\Handler)
            ->setElementHandler(Plan\CaptureTones\Element::class, new Plan\CaptureTones\Handler)
            ->setElementHandler(Plan\Conference\Element::class, new Plan\Conference\Handler)
            ->setElementHandler(Plan\Hangup\Element::class, new Plan\Hangup\Handler)
            ->setElementHandler(Plan\Playback\Element::class, new Plan\Playback\Handler)
            ->setElementHandler(Plan\Record\Element::class, new Plan\Record\Handler)
            ->setElementHandler(Plan\Redirect\Element::class, new Plan\Redirect\Handler)
            ->setElementHandler(Plan\Silence\Element::class, new Plan\Silence\Handler)
            ->setElementHandler(Plan\Speak\Element::class, new Plan\Speak\Handler)
            ->setElementHandler(Eqivo\Plan\Dial\Element::class, new Eqivo\Plan\Dial\Handler)
            ->setElementHandler(Eqivo\Plan\PreAnswer\Element::class, new Eqi#!/usr/bin/env php
<?php

declare(strict_types=1);

use RTCKit\Eqivo as Eqivo; // 使用 RTCKit\Eqivo 命名空间

use RTCKit\FiCore\{ // 使用 RTCKit\FiCore 命名空间
    Plan, // 命名空间 RTCKit\FiCore\Plan，用于设置计划
    Command, // 命名空间 RTCKit\FiCore\Command，用于处理命令
    Signal, // 命名空间 RTCKit\FiCore\Signal，用于处理信号
};
use RTCKit\FiCore\Switch\ESL; // 使用 RTCKit\FiCore\Switch\ESL 命名空间，该命名空间实现了 Event Socket Library

error_reporting(-1); // 将错误报告级别设置为最高
set_time_limit(0); // 设置执行时间限制为无限

if (is_file(__DIR__ . '/../vendor/autoload.php')) { // 如果可以找到上级目录的 autoload.php 文件
    $autoloadPath = __DIR__ . '/../vendor/autoload.php'; // 将该文件路径赋值给 $autoloadPath 变量
} else if (is_file('./vendor/autoload.php')) { // 如果可以找到当前目录的 autoload.php 文件
    $autoloadPath = './vendor/autoload.php'; // 将该文件路径赋值给 $autoloadPath 变量
} else {
    die('Cannot locate vendor/autoload.php file!' . PHP_EOL); // 否则输出错误信息并终止脚本
}

/** @psalm-suppress UnresolvableInclude */
require_once($autoloadPath); // 引入 autoload.php 文件

if (!defined('PHP_VERSION_ID') || (PHP_VERSION_ID < 80100)) { // 如果 PHP 版本小于 8.1
    die('Eqivo requires PHP 8.1+' . PHP_EOL); // 输出错误信息并终止脚本
}

foreach (['ctype', 'date', 'filter', 'json', 'libxml', 'pcre', 'simplexml'] as $ext) { // 遍历需要的 PHP 扩展
    if (!extension_loaded($ext)) { // 如果扩展未加载
        die("Please make sure '{$ext}' extension is available and enabled in your PHP configuration" . PHP_EOL); // 输出错误信息并终止脚本
    }
}

libxml_use_internal_errors(true); // 开启 libxml 内部错误处理

$eqivo = new Eqivo\App; // 创建 Eqivo\App 实例

$eqivo
    ->setConfig(new Eqivo\Config\Set) // 设置配置
    ->addConfigResolver(new Eqivo\Config\CliArguments) // 添加从命令行参数解析配置的解析器
    ->addConfigResolver(new Eqivo\Config\LegacyConfigFile) // 添加从旧的配置文件中解析配置的解析器
    ->addConfigResolver(new Eqivo\Config\ConfigFile) // 添加从配置文件中解析配置的解析器
    ->addConfigResolver(new Eqivo\Config\EnvironmentVars) // 添加从环境变量中解析配置的解析器
    ->resolveConfig(); // 解析配置

$eqivo->setHttpClient(new Eqivo\HttpClient); // 设置 HTTP 客户端

$eqivo
    ->setEventConsumer(new ESL\Event\Consumer) // 设置事件消费者
    ->setPlanConsumer( // 设置计划消费者
        (new Eqivo\Plan\Consumer) // 创建 Eqivo\Plan\Consumer 实例
            ->setApp($eqivo) // 设置应用程序实例
            ->setElementHandler(Plan\CaptureSpeech\Element::class, new Plan\CaptureSpeech\Handler) // 设置 Plan\CaptureSpeech 元素的处理器
            ->setElementHandler(Plan\CaptureTones\Element::class, new Plan\CaptureTones\Handler) // 设置 Plan\CaptureTones 元素的处理器
            ->setElementHandler(Plan\Conference\Element::class, new Plan\Conference\Handler) // 设置 Plan\Conference 元素的处理器
            ->setElementHandler(Plan\Hangup\Element::class, new Plan\Hangup\Handler) // 设置 Plan\Hangup 元素的处理器
            ->setElementHandler(Plan\Playback\Element::class, new Plan\Playback\Handler) // 设置 Plan\Playback 元素的处理器
            ->setElementHandler(Plan\Record\Element::class, new Plan\Record\Handler) // 设置 Plan\Record 元素的处理器
            ->setElementHandler(Plan\Redirect\Element::class, new Plan\Redirect\Handler) // 设置 Plan\Redirect 元素的处理器
            ->setElementHandler(Plan\Silence\Element::class, new Plan\Silence\Handler) // 设置 Plan\Silence 元素的处理器
            ->setElementHandler(Plan\Speak\Element::class, new Plan\Speak\Handler) // 设置 Plan\Speak 元素的处理器
            ->setElementHandler(Eqivo\Plan\Dial\Element::class, new Eqivo\Plan\Dial\Handler) // 设置 Eqivo\Plan\Dial 元素的处理器
            ->setElementHandler(Eqivo\Plan\PreAnswer\Element::class, new Eqivo\Plan\PreAnswer\Handler) // 设置 Eqivo\Plan\PreAnswer 元素的处理器
            ->setElementHandler(Eqivo\Plan\SipTransfer\Element::class, new Eqivo\Plan\SipTransfer\Handler) // 设置 Eqivo\Plan\SipTransfer 元素的处理器
    )
    ->setPlanProducer( // 设置计划生产者
        (new Eqivo\Plan\Producer) // 创建 Eqivo\Plan\Producer 实例
            ->setApp($eqivo) // 设置应用程序实例
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Conference) // 设置从 XML 元素解析成计划的 Conference 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Dial) // 设置从 XML 元素解析成计划的 Dial 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\GetDigits) // 设置从 XML 元素解析成计划的 GetDigits 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\GetSpeech) // 设置从 XML 元素解析成计划的 GetSpeech 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Hangup) // 设置从 XML 元素解析成计划的 Hangup 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Play) // 设置从 XML 元素解析成计划的 Play 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\PreAnswer) // 设置从 XML 元素解析成计划的 PreAnswer 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Record) // 设置从 XML 元素解析成计划的 Record 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Redirect) // 设置从 XML 元素解析成计划的 Redirect 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\SipTransfer) // 设置从 XML 元素解析成计划的 SipTransfer 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Speak) // 设置从 XML 元素解析成计划的 Speak 解析器
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Wait) // 设置从 XML 元素解析成计划的 Wait 解析器
    );

$eqivo->setSignalProducer( // 设置信号生产者
    (new Eqivo\Signal\Producer) // 创建 Eqivo\Signal\Producer 实例
        ->setApp($eqivo) // 设置应用程序实例
        ->setSignalHandler(Signal\Channel\DTMF::class, new Eqivo\Signal\Handler\Channel\DTMF) // 设置 Signal\Channel\DTMF 信号的处理器
        ->setSignalHandler(Signal\Channel\Hangup::class, new Eqivo\Signal\Handler\Channel\Hangup) // 设置 Signal\Channel\Hangup 信号的处理器
        ->setSignalHandler(Signal\Channel\Heartbeat::class, new Eqivo\Signal\Handler\Channel\Heartbeat) // 设置 Signal\Channel\Heartbeat 信号的处理器
        ->setSignalHandler(Signal\Channel\MachineDetection::class, new Eqivo\Signal\Handler\Channel\MachineDetection) // 设置 Signal\Channel\MachineDetection 信号的处理器
        ->setSignalHandler(Signal\Channel\Progress::class, new Eqivo\Signal\Handler\Channel\Progress) //vo\Plan\PreAnswer\Handler)
            ->setElementHandler(Eqivo\Plan\SipTransfer\Element::class, new Eqivo\Plan\SipTransfer\Handler)
    )
    ->setPlanProducer(
        (new Eqivo\Plan\Producer)
            ->setApp($eqivo)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Conference)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Dial)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\GetDigits)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\GetSpeech)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Hangup)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Play)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\PreAnswer)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Record)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Redirect)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\SipTransfer)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Speak)
            ->setRestXmlElementParser(new Eqivo\Plan\Parser\Wait)
    );

$eqivo->setSignalProducer(
    (new Eqivo\Signal\Producer)
        ->setApp($eqivo)
        ->setSignalHandler(Signal\Channel\DTMF::class, new Eqivo\Signal\Handler\Channel\DTMF)
        ->setSignalHandler(Signal\Channel\Hangup::class, new Eqivo\Signal\Handler\Channel\Hangup)
        ->setSignalHandler(Signal\Channel\Heartbeat::class, new Eqivo\Signal\Handler\Channel\Heartbeat)
        ->setSignalHandler(Signal\Channel\MachineDetection::class, new Eqivo\Signal\Handler\Channel\MachineDetection)
        ->setSignalHandler(Signal\Channel\Progress::class, new Eqivo\Signal\Handler\Channel\Progress)
        ->setSignalHandler(Signal\Channel\Recording::class, new Eqivo\Signal\Handler\Channel\Recording)
        ->setSignalHandler(Signal\Channel\Speech::class, new Eqivo\Signal\Handler\Channel\Speech)
        ->setSignalHandler(Signal\Conference\DTMF::class, new Eqivo\Signal\Handler\Conference\DTMF)
        ->setSignalHandler(Signal\Conference\Enter::class, new Eqivo\Signal\Handler\Conference\Enter)
        ->setSignalHandler(Signal\Conference\Floor::class, new Eqivo\Signal\Handler\Conference\Floor)
        ->setSignalHandler(Signal\Conference\Leave::class, new Eqivo\Signal\Handler\Conference\Leave)
        ->setSignalHandler(Signal\Conference\Recording::class, new Eqivo\Signal\Handler\Conference\Recording)
        ->setSignalHandler(Eqivo\Signal\Channel\Bridge::class, new Eqivo\Signal\Handler\Channel\Bridge)
        ->setSignalHandler(Eqivo\Signal\Channel\DTMF::class, new Eqivo\Signal\Handler\Channel\DTMF)
);

$eqivo->setEslClient(
    (new ESL\Client)
        ->setApp($eqivo)
        ->setEventHandler(new ESL\Event\BackgroundJob)
        ->setEventHandler(new ESL\Event\ChannelHangupComplete)
        ->setEventHandler(new ESL\Event\ChannelProgress)
        ->setEventHandler(new ESL\Event\ChannelProgressMedia)
        ->setEventHandler(new ESL\Event\ChannelState)
        ->setEventHandler(new ESL\Event\Custom)
        ->setEventHandler(new ESL\Event\RecordStop)
        ->setEventHandler(new ESL\Event\SessionHeartbeat)
        ->setEventHandler(new Eqivo\Switch\ESL\Event\CallUpdate)
);

$eqivo->setCommandConsumer(
    (new Command\Consumer)
        ->setApp($eqivo)
        ->setMethodHandler(Command\Channel\DTMF\Request::class, new Command\Channel\DTMF\Handler)
        ->setMethodHandler(Command\Channel\Hangup\Request::class, new Command\Channel\Hangup\Handler)
        ->setMethodHandler(Command\Channel\Originate\Request::class, new Command\Channel\Originate\Handler)
        ->setMethodHandler(Command\Channel\Playback\Request::class, new Command\Channel\Playback\Handler)
        ->setMethodHandler(Command\Channel\Record\Request::class, new Command\Channel\Record\Handler)
        ->setMethodHandler(Command\Channel\Redirect\Request::class, new Command\Channel\Redirect\Handler)
        ->setMethodHandler(Command\Conference\Member\Request::class, new Command\Conference\Member\Handler)
        ->setMethodHandler(Command\Conference\Playback\Request::class, new Command\Conference\Playback\Handler)
        ->setMethodHandler(Command\Conference\Record\Request::class, new Command\Conference\Record\Handler)
        ->setMethodHandler(Command\Conference\Speak\Request::class, new Command\Conference\Speak\Handler)
        ->setMethodHandler(Eqivo\Command\Channel\SoundTouch\Request::class, new Eqivo\Command\Channel\SoundTouch\Handler)
        ->setMethodHandler(Eqivo\Command\Conference\Query\Request::class, new Eqivo\Command\Conference\Query\Handler)
);

$eqivo->setRestServer(
    (new Eqivo\Rest\Server)
        ->setApp($eqivo)
        ->setRouteController('POST', '/v0.1/BulkCall/', new Eqivo\Rest\Controller\V0_1\BulkCall)
        ->setRouteController('POST', '/v0.1/Call/', new Eqivo\Rest\Controller\V0_1\Call)
        ->setRouteController('POST', '/v0.1/CancelScheduledHangup/', new Eqivo\Rest\Controller\V0_1\CancelScheduledHangup)
        ->setRouteController('POST', '/v0.1/CancelScheduledPlay/', new Eqivo\Rest\Controller\V0_1\CancelScheduledPlay)
        ->setRouteController('POST', '/v0.1/ConferenceDeaf/', new Eqivo\Rest\Controller\V0_1\ConferenceDeaf)
        ->setRouteController('POST', '/v0.1/ConferenceHangup/', new Eqivo\Rest\Controller\V0_1\ConferenceHangup)
        ->setRouteController('POST', '/v0.1/ConferenceKick/', new Eqivo\Rest\Controller\V0_1\ConferenceKick)
        ->setRouteController('POST', '/v0.1/ConferenceList/', new Eqivo\Rest\Controller\V0_1\ConferenceList)
        ->setRouteController('POST', '/v0.1/ConferenceListMembers/', new Eqivo\Rest\Controller\V0_1\ConferenceListMembers)
        ->setRouteController('POST', '/v0.1/ConferenceMute/', new Eqivo\Rest\Controller\V0_1\ConferenceMute)
        ->setRouteController('POST', '/v0.1/ConferencePlay/', new Eqivo\Rest\Controller\V0_1\ConferencePlay)
        ->setRouteController('POST', '/v0.1/ConferenceRecordStart/', new Eqivo\Rest\Controller\V0_1\ConferenceRecordStart)
        ->setRouteController('POST', '/v0.1/ConferenceRecordStop/', new Eqivo\Rest\Controller\V0_1\ConferenceRecordStop)
        ->setRouteController('POST', '/v0.1/ConferenceSpeak/', new Eqivo\Rest\Controller\V0_1\ConferenceSpeak)
        ->setRouteController('POST', '/v0.1/ConferenceUndeaf/', new Eqivo\Rest\Controller\V0_1\ConferenceUndeaf)
        ->setRouteController('POST', '/v0.1/ConferenceUnmute/', new Eqivo\Rest\Controller\V0_1\ConferenceUnmute)
        ->setRouteController('POST', '/v0.1/GroupCall/', new Eqivo\Rest\Controller\V0_1\GroupCall)
        ->setRouteController('POST', '/v0.1/HangupAllCalls/', new Eqivo\Rest\Controller\V0_1\HangupAllCalls)
        ->setRouteController('POST', '/v0.1/HangupCall/', new Eqivo\Rest\Controller\V0_1\HangupCall)
        ->setRouteController('POST', '/v0.1/Play/', new Eqivo\Rest\Controller\V0_1\Play)
        ->setRouteController('POST', '/v0.1/PlayStop/', new Eqivo\Rest\Controller\V0_1\PlayStop)
        ->setRouteController('POST', '/v0.1/RecordStart/', new Eqivo\Rest\Controller\V0_1\RecordStart)
        ->setRouteController('POST', '/v0.1/RecordStop/', new Eqivo\Rest\Controller\V0_1\RecordStop)
        ->setRouteController('POST', '/v0.1/ScheduleHangup/', new Eqivo\Rest\Controller\V0_1\ScheduleHangup)
        ->setRouteController('POST', '/v0.1/SchedulePlay/', new Eqivo\Rest\Controller\V0_1\SchedulePlay)
        ->setRouteController('POST', '/v0.1/SendDigits/', new Eqivo\Rest\Controller\V0_1\SendDigits)
        ->setRouteController('POST', '/v0.1/SoundTouch/', new Eqivo\Rest\Controller\V0_1\SoundTouch)
        ->setRouteController('POST', '/v0.1/SoundTouchStop/', new Eqivo\Rest\Controller\V0_1\SoundTouchStop)
        ->setRouteController('POST', '/v0.1/TransferCall/', new Eqivo\Rest\Controller\V0_1\TransferCall)
);

$eqivo->setEslServer(new ESL\Server);

$eqivo->prepare();
$eqivo->run();
